// <auto-generated />
using System;
using DTC_Dental.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DTC_Dental.Migrations
{
    [DbContext(typeof(DentalContext))]
    [Migration("20231130232752_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.13");

            modelBuilder.Entity("DTC_Dental.Models.Appointment", b =>
                {
                    b.Property<int>("AppointmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("AppointmentTypeID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DentistID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PatientID")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("TEXT");

                    b.HasKey("AppointmentID");

                    b.HasIndex("AppointmentTypeID");

                    b.HasIndex("DentistID");

                    b.HasIndex("PatientID");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("DTC_Dental.Models.AppointmentType", b =>
                {
                    b.Property<int>("AppointmentTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AppointmentName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Duration")
                        .HasColumnType("INTEGER");

                    b.HasKey("AppointmentTypeID");

                    b.ToTable("AppointmentTypes");

                    b.HasData(
                        new
                        {
                            AppointmentTypeID = 1,
                            AppointmentName = "Cosmetic Consultation - Adult",
                            Description = "Initial consultation with adult patient to discuss cosmetic dentistry options.",
                            Duration = 30
                        },
                        new
                        {
                            AppointmentTypeID = 2,
                            AppointmentName = "Cosmetic Consultation - Child",
                            Description = "Initial consultation with child patient to discuss cosmetic dentistry options. ",
                            Duration = 30
                        },
                        new
                        {
                            AppointmentTypeID = 3,
                            AppointmentName = "Cosmetic Consultation - Teen",
                            Description = "Initial consultation with teen patient to discuss cosmetic dentistry options. ",
                            Duration = 30
                        },
                        new
                        {
                            AppointmentTypeID = 4,
                            AppointmentName = "Cosmetic Procedure - Adult",
                            Description = "Cosmetic dentistry procedure for adult patient.",
                            Duration = 120
                        },
                        new
                        {
                            AppointmentTypeID = 5,
                            AppointmentName = "Cosmetic Procedure - Child",
                            Description = "Cosmetic dentistry procedure for child patient.",
                            Duration = 120
                        },
                        new
                        {
                            AppointmentTypeID = 6,
                            AppointmentName = "Cosmetic Procedure - Teen",
                            Description = "Cosmetic dentistry procedure for teen patient.",
                            Duration = 120
                        },
                        new
                        {
                            AppointmentTypeID = 7,
                            AppointmentName = "Endodontic Procedure - Adult",
                            Description = "Painless root canal therapy for adults.",
                            Duration = 90
                        },
                        new
                        {
                            AppointmentTypeID = 8,
                            AppointmentName = "Endodontic Procedure - Child",
                            Description = "Painless root canal therapy for children.",
                            Duration = 90
                        },
                        new
                        {
                            AppointmentTypeID = 9,
                            AppointmentName = "Endodontic Procedure - Teen",
                            Description = "Painless root canal therapy for teens.",
                            Duration = 90
                        },
                        new
                        {
                            AppointmentTypeID = 10,
                            AppointmentName = "New Patient - Adult",
                            Description = "Meet new patient with general dental check-up including x-rays and teeth cleaning.",
                            Duration = 30
                        },
                        new
                        {
                            AppointmentTypeID = 11,
                            AppointmentName = "New Patient - Child",
                            Description = "Meet new patient with general dental check-up including x-rays and teeth cleaning.",
                            Duration = 30
                        },
                        new
                        {
                            AppointmentTypeID = 12,
                            AppointmentName = "New Patient - Teen",
                            Description = "Meet new patient with general dental check-up including x-rays and teeth cleaning.",
                            Duration = 30
                        },
                        new
                        {
                            AppointmentTypeID = 13,
                            AppointmentName = "Periodontal Treatment - Adult",
                            Description = "Treatment (both preventative or restorative) for gum diseases.",
                            Duration = 60
                        },
                        new
                        {
                            AppointmentTypeID = 14,
                            AppointmentName = "Periodontal Treatment - Child",
                            Description = "Treatment (both preventative or restorative) for gum diseases.",
                            Duration = 60
                        },
                        new
                        {
                            AppointmentTypeID = 15,
                            AppointmentName = "Periodontal Treatment - Teen",
                            Description = "Treatment (both preventative or restorative) for gum diseases.",
                            Duration = 60
                        },
                        new
                        {
                            AppointmentTypeID = 16,
                            AppointmentName = "Preventative Care - Adult",
                            Description = "General preventative care for an adult patient. The appointment will include x-rays\\54 teeth cleaning\\54 and general oral hygiene advising.",
                            Duration = 60
                        },
                        new
                        {
                            AppointmentTypeID = 17,
                            AppointmentName = "Preventative Care - Child",
                            Description = "General preventative care for a child patient. The appointment will include x-rays\\54 teeth cleaning\\54 and general oral hygiene advising.",
                            Duration = 60
                        },
                        new
                        {
                            AppointmentTypeID = 18,
                            AppointmentName = "Preventative Care - Teen",
                            Description = "General preventative care for a teen patient. The appointment will include x-rays\\54 teeth cleaning\\54 and general oral hygiene advising.",
                            Duration = 60
                        },
                        new
                        {
                            AppointmentTypeID = 19,
                            AppointmentName = "Prosthodontic Care - Adult",
                            Description = "Restoration and/or replacement of missing or damaged teeth for adults.",
                            Duration = 60
                        },
                        new
                        {
                            AppointmentTypeID = 20,
                            AppointmentName = "Prosthodontic Care - Child",
                            Description = "Restoration and/or replacement of missing or damaged teeth for children.",
                            Duration = 60
                        },
                        new
                        {
                            AppointmentTypeID = 21,
                            AppointmentName = "Prosthodontic Care - Teen",
                            Description = "Restoration and/or replacement of missing or damaged teeth for teens.",
                            Duration = 60
                        });
                });

            modelBuilder.Entity("DTC_Dental.Models.CompletedService", b =>
                {
                    b.Property<int>("ServiceID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VisitID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ServiceID", "VisitID");

                    b.HasIndex("VisitID");

                    b.ToTable("CompletedServices");

                    b.HasData(
                        new
                        {
                            ServiceID = 3,
                            VisitID = 1001
                        },
                        new
                        {
                            ServiceID = 7,
                            VisitID = 1002
                        },
                        new
                        {
                            ServiceID = 11,
                            VisitID = 1003
                        },
                        new
                        {
                            ServiceID = 1,
                            VisitID = 1004
                        },
                        new
                        {
                            ServiceID = 5,
                            VisitID = 1005
                        },
                        new
                        {
                            ServiceID = 15,
                            VisitID = 1006
                        },
                        new
                        {
                            ServiceID = 8,
                            VisitID = 1007
                        },
                        new
                        {
                            ServiceID = 4,
                            VisitID = 1008
                        },
                        new
                        {
                            ServiceID = 1,
                            VisitID = 1009
                        },
                        new
                        {
                            ServiceID = 2,
                            VisitID = 1010
                        });
                });

            modelBuilder.Entity("DTC_Dental.Models.Dentist", b =>
                {
                    b.Property<int>("DentistID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("DentistID");

                    b.ToTable("Dentists");

                    b.HasData(
                        new
                        {
                            DentistID = 13340,
                            FirstName = "Michael",
                            HireDate = new DateTime(2022, 6, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Jordan"
                        },
                        new
                        {
                            DentistID = 38345,
                            FirstName = "Magic",
                            HireDate = new DateTime(2022, 5, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Johnson"
                        },
                        new
                        {
                            DentistID = 18631,
                            FirstName = "Larry",
                            HireDate = new DateTime(2022, 1, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Bird"
                        },
                        new
                        {
                            DentistID = 17000,
                            FirstName = "Hakeem",
                            HireDate = new DateTime(2022, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Olajuwon"
                        },
                        new
                        {
                            DentistID = 43377,
                            FirstName = "Julius",
                            HireDate = new DateTime(2023, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Erving"
                        });
                });

            modelBuilder.Entity("DTC_Dental.Models.Patient", b =>
                {
                    b.Property<int>("PatientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DOB")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Minor")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PatientHOHID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SSN")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PatientID");

                    b.HasIndex("PatientHOHID");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            PatientID = 88306,
                            Address = "890 W. Bald Hill St.",
                            City = "Los Angeles",
                            DOB = "December 30, 1984",
                            Email = "KingJames23@gmail.com",
                            FirstName = "Lebron",
                            LastName = "James",
                            Minor = false,
                            Phone = "213-200-9784",
                            SSN = "637-91-4375",
                            State = "California",
                            Zip = "90001"
                        },
                        new
                        {
                            PatientID = 91959,
                            Address = "890 W. Bald Hill St.",
                            City = "Los Angeles",
                            DOB = "March 11, 1990",
                            Email = "SavJames3@gmail.com",
                            FirstName = "Savannah",
                            LastName = "James",
                            Minor = false,
                            PatientHOHID = 88306,
                            Phone = "213-206-3371",
                            SSN = "587-91-4946",
                            State = "California",
                            Zip = "90001"
                        },
                        new
                        {
                            PatientID = 56397,
                            Address = "890 W. Bald Hill St.",
                            City = "Los Angeles",
                            DOB = "October 6, 2006",
                            Email = "BronnyBuckets@gmail.com",
                            FirstName = "Bronny",
                            LastName = "James",
                            Minor = true,
                            PatientHOHID = 88306,
                            Phone = "213-202-8978",
                            SSN = "653-90-4532",
                            State = "California",
                            Zip = "90001"
                        },
                        new
                        {
                            PatientID = 34437,
                            Address = "890 W. Bald Hill St.",
                            City = "Los Angeles",
                            DOB = "June 14, 2007",
                            Email = "BryceMaximus@yahoo.com",
                            FirstName = "Bryce",
                            LastName = "James",
                            Minor = true,
                            PatientHOHID = 88306,
                            Phone = "213-219-8612",
                            SSN = "657-76-2220",
                            State = "California",
                            Zip = "90001"
                        },
                        new
                        {
                            PatientID = 66062,
                            Address = "586 Silver Spear Street",
                            City = "Houston",
                            DOB = "February 19, 1995",
                            Email = "TheJoker15@yahoo.com",
                            FirstName = "Nikola",
                            LastName = "Jokic",
                            Minor = false,
                            Phone = "303-200-0132",
                            SSN = "097-97-8353",
                            State = "Texas",
                            Zip = "77020"
                        },
                        new
                        {
                            PatientID = 41469,
                            Address = "586 Silver Spear Street",
                            City = "Houston",
                            DOB = "February 9, 2002",
                            Email = "NatlijaJockic04@yahoo.com",
                            FirstName = "Natalija",
                            LastName = "Jokic",
                            Minor = false,
                            PatientHOHID = 66062,
                            Phone = "281-200-7859",
                            SSN = "389-93-4116",
                            State = "Texas",
                            Zip = "77020"
                        },
                        new
                        {
                            PatientID = 78740,
                            Address = "586 Silver Spear Street",
                            City = "Houston",
                            DOB = "July 25, 2012",
                            Email = "BabyJokic28@gmail.com",
                            FirstName = "Alperen",
                            LastName = "Jokic",
                            Minor = true,
                            PatientHOHID = 66062,
                            Phone = "281-204-7433",
                            SSN = "746-07-9191",
                            State = "Texas",
                            Zip = "77020"
                        },
                        new
                        {
                            PatientID = 55746,
                            Address = "89 Sulphur Springs Drive",
                            City = "San Francisco",
                            DOB = "March 14, 1988",
                            Email = "ChefCurry30@yahoo.com",
                            FirstName = "Steph",
                            LastName = "Curry",
                            Minor = false,
                            Phone = "415-200-9230",
                            SSN = "151-58-7392",
                            State = "California",
                            Zip = "94016"
                        },
                        new
                        {
                            PatientID = 89349,
                            Address = "3201 W Dolores Rd.",
                            City = "Phoenix",
                            DOB = "September 29, 1988",
                            Email = "SlimReaper@gmail.com",
                            FirstName = "Kevin",
                            LastName = "Durant",
                            Minor = false,
                            Phone = "480-200-2534",
                            SSN = "814-06-9775",
                            State = "Arizona",
                            Zip = "85001"
                        },
                        new
                        {
                            PatientID = 74739,
                            Address = "7034 Beacon Ave.",
                            City = "Los Angeles",
                            DOB = "June 29, 1991",
                            Email = "TheKlaw02@yahoo.com",
                            FirstName = "Kawhi",
                            LastName = "Leonard",
                            Minor = false,
                            Phone = "213-204-7048",
                            SSN = "906-40-9355",
                            State = "California",
                            Zip = "90013"
                        },
                        new
                        {
                            PatientID = 67508,
                            Address = "808 Greenview Street",
                            City = "Houston",
                            DOB = "May 13, 2003",
                            Email = "JabariSmith1@yahoo.com",
                            FirstName = "Jabari",
                            LastName = "Smith Jr.",
                            Minor = false,
                            Phone = "281-254-6991",
                            SSN = "487-35-6778",
                            State = "Texas",
                            Zip = "77356"
                        },
                        new
                        {
                            PatientID = 86034,
                            Address = "588 Purple Finch Street",
                            City = "Houston",
                            DOB = "August 26, 1989",
                            Email = "Thebeard13@gmail.com",
                            FirstName = "James",
                            LastName = "Harden",
                            Minor = false,
                            Phone = "281-293-0296",
                            SSN = "526-38-6029",
                            State = "Texas",
                            Zip = "77084"
                        },
                        new
                        {
                            PatientID = 94954,
                            Address = "9859 South Beach Court",
                            City = "Los Angeles",
                            DOB = "November 12, 1988",
                            Email = "MrTripleDouble@yahoo.com",
                            FirstName = "Russell",
                            LastName = "Westbrook",
                            Minor = false,
                            Phone = "213-237-5406",
                            SSN = "238-55-1419",
                            State = "California",
                            Zip = "90001"
                        },
                        new
                        {
                            PatientID = 10013,
                            Address = "388 Woodside Street",
                            City = "Houston",
                            DOB = "November 15, 1977",
                            Email = "TroyThompson123@gmail.com",
                            FirstName = "Troy",
                            LastName = "Thompson",
                            Minor = false,
                            Phone = "281-123-4567",
                            SSN = "438-28-9051",
                            State = "Texas",
                            Zip = "77044"
                        },
                        new
                        {
                            PatientID = 42021,
                            Address = "388 Woodside Street",
                            City = "Houston",
                            DOB = "January 30, 2014",
                            Email = "AusurXLNC@gmail.com",
                            FirstName = "Ausar",
                            LastName = "Thompson",
                            Minor = true,
                            PatientHOHID = 10013,
                            Phone = "281-377-3441",
                            SSN = "275-77-1974",
                            State = "Texas",
                            Zip = "77044"
                        },
                        new
                        {
                            PatientID = 36956,
                            Address = "388 Woodside Street",
                            City = "Houston",
                            DOB = "January 30, 2014",
                            Email = "AmenXLNC@gmail.com",
                            FirstName = "Amen",
                            LastName = "Thompson",
                            Minor = true,
                            PatientHOHID = 10013,
                            Phone = "281-268-5959",
                            SSN = "508-44-2426",
                            State = "Texas",
                            Zip = "77044"
                        },
                        new
                        {
                            PatientID = 68064,
                            Address = "1810 Rainy Day Drive",
                            City = "Boston",
                            DOB = "March 3, 1998",
                            Email = "JTceltics0@gmail.com",
                            FirstName = "Jayson",
                            LastName = "Tatum",
                            Minor = false,
                            Phone = "339-205-4305",
                            SSN = "713022929",
                            State = "Massachusetts",
                            Zip = "02111"
                        });
                });

            modelBuilder.Entity("DTC_Dental.Models.Service", b =>
                {
                    b.Property<int>("ServiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Cost")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ServiceID");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            ServiceID = 1,
                            Cost = 250,
                            Description = "X-Ray"
                        },
                        new
                        {
                            ServiceID = 2,
                            Cost = 350,
                            Description = "Drill Cavity"
                        },
                        new
                        {
                            ServiceID = 3,
                            Cost = 750,
                            Description = "Crown"
                        },
                        new
                        {
                            ServiceID = 4,
                            Cost = 250,
                            Description = "Fill Cavity"
                        },
                        new
                        {
                            ServiceID = 5,
                            Cost = 500,
                            Description = "Extract Tooth"
                        },
                        new
                        {
                            ServiceID = 6,
                            Cost = 1500,
                            Description = "Root Canal"
                        },
                        new
                        {
                            ServiceID = 7,
                            Cost = 350,
                            Description = "Tooth Whitening"
                        },
                        new
                        {
                            ServiceID = 8,
                            Cost = 2500,
                            Description = "Dental Implant"
                        },
                        new
                        {
                            ServiceID = 9,
                            Cost = 4500,
                            Description = "Dentures"
                        },
                        new
                        {
                            ServiceID = 10,
                            Cost = 250,
                            Description = "Anesthetic"
                        },
                        new
                        {
                            ServiceID = 11,
                            Cost = 150,
                            Description = "Cleaning"
                        },
                        new
                        {
                            ServiceID = 12,
                            Cost = 350,
                            Description = "Pediatric Dental Counseling"
                        },
                        new
                        {
                            ServiceID = 13,
                            Cost = 500,
                            Description = "Dental Exam"
                        },
                        new
                        {
                            ServiceID = 14,
                            Cost = 250,
                            Description = "Dental Screening"
                        },
                        new
                        {
                            ServiceID = 15,
                            Cost = 275,
                            Description = "Flouride Treatment"
                        });
                });

            modelBuilder.Entity("DTC_Dental.Models.Visit", b =>
                {
                    b.Property<int>("VisitID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DentistID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PatientID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("VisitDate")
                        .HasColumnType("TEXT");

                    b.HasKey("VisitID");

                    b.HasIndex("DentistID");

                    b.HasIndex("PatientID");

                    b.ToTable("Visits");

                    b.HasData(
                        new
                        {
                            VisitID = 1001,
                            DentistID = 43377,
                            PatientID = 10013,
                            VisitDate = new DateTime(2021, 3, 18, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            VisitID = 1002,
                            DentistID = 17000,
                            PatientID = 67508,
                            VisitDate = new DateTime(2021, 7, 29, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            VisitID = 1003,
                            DentistID = 18631,
                            PatientID = 68064,
                            VisitDate = new DateTime(2021, 8, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            VisitID = 1004,
                            DentistID = 38345,
                            PatientID = 91959,
                            VisitDate = new DateTime(2021, 10, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            VisitID = 1005,
                            DentistID = 13340,
                            PatientID = 66062,
                            VisitDate = new DateTime(2021, 11, 27, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            VisitID = 1006,
                            DentistID = 18631,
                            PatientID = 42021,
                            VisitDate = new DateTime(2021, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            VisitID = 1007,
                            DentistID = 43377,
                            PatientID = 94954,
                            VisitDate = new DateTime(2023, 1, 17, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            VisitID = 1008,
                            DentistID = 43377,
                            PatientID = 86034,
                            VisitDate = new DateTime(2023, 1, 17, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            VisitID = 1009,
                            DentistID = 17000,
                            PatientID = 55746,
                            VisitDate = new DateTime(2023, 5, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            VisitID = 1010,
                            DentistID = 38345,
                            PatientID = 34437,
                            VisitDate = new DateTime(2023, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("DTC_Dental.Models.Appointment", b =>
                {
                    b.HasOne("DTC_Dental.Models.AppointmentType", "AppointmentType")
                        .WithMany()
                        .HasForeignKey("AppointmentTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DTC_Dental.Models.Dentist", "Dentist")
                        .WithMany()
                        .HasForeignKey("DentistID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DTC_Dental.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppointmentType");

                    b.Navigation("Dentist");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DTC_Dental.Models.CompletedService", b =>
                {
                    b.HasOne("DTC_Dental.Models.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DTC_Dental.Models.Visit", "Visit")
                        .WithMany()
                        .HasForeignKey("VisitID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("DTC_Dental.Models.Patient", b =>
                {
                    b.HasOne("DTC_Dental.Models.Patient", "HOH")
                        .WithMany("Dependents")
                        .HasForeignKey("PatientHOHID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("HOH");
                });

            modelBuilder.Entity("DTC_Dental.Models.Visit", b =>
                {
                    b.HasOne("DTC_Dental.Models.Dentist", "Dentist")
                        .WithMany()
                        .HasForeignKey("DentistID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DTC_Dental.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dentist");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DTC_Dental.Models.Patient", b =>
                {
                    b.Navigation("Dependents");
                });
#pragma warning restore 612, 618
        }
    }
}
